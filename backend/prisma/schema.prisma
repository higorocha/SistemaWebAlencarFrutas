generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id              Int              @id @default(autoincrement())
  nome            String
  cpf             String           @unique
  email           String           @unique
  nivel           NivelUsuario     @default(ESCRITORIO)
  senha           String
  dataCadastro    DateTime         @default(now())
  ultimoAcesso    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  culturaId       Int?             @map("cultura_id")
  controlesBanana ControleBanana[]
  fitasBanana     FitaBanana[]
  historicosFitas HistoricoFitas[]
  notificacoes    Notificacao[]
  cultura         Cultura?         @relation(fields: [culturaId], references: [id])

  @@map("usuarios")
}

model ConfigDadosEmpresa {
  id            Int      @id @default(autoincrement())
  razao_social  String
  nome_fantasia String
  cnpj          String   @unique
  telefone      String
  logradouro    String
  cep           String
  bairro        String
  cidade        String
  estado        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  proprietario  String?

  @@map("config_dados_empresa")
}

model ContaCorrente {
  id                  Int                @id @default(autoincrement())
  bancoCodigo         String
  agencia             String
  agenciaDigito       String
  contaCorrente       String
  contaCorrenteDigito String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  conveniosCobranca   ConvenioCobranca[]
  credenciaisAPI      CredenciaisAPI[]

  @@unique([bancoCodigo, agencia, contaCorrente])
  @@map("conta_corrente")
}

model CredenciaisAPI {
  id              Int           @id @default(autoincrement())
  banco           String
  contaCorrenteId Int
  modalidadeApi   String
  developerAppKey String
  clienteId       String
  clienteSecret   String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contaCorrente   ContaCorrente @relation(fields: [contaCorrenteId], references: [id], onDelete: Cascade)

  @@unique([banco, contaCorrenteId, modalidadeApi])
  @@map("credenciais_api")
}

model ConvenioCobranca {
  id                      Int           @id @default(autoincrement())
  contaCorrenteId         Int
  juros                   Float
  diasAberto              Int
  multaAtiva              Boolean
  layoutBoletoFundoBranco Boolean
  valorMulta              Float?
  carenciaMulta           Int?
  convenio                String
  carteira                String
  variacao                String
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  contaCorrente           ContaCorrente @relation(fields: [contaCorrenteId], references: [id], onDelete: Cascade)

  @@map("convenio_cobranca")
}

model ConfigEmail {
  id                 Int      @id @default(autoincrement())
  servidorSMTP       String
  porta              Int
  emailEnvio         String
  nomeExibicao       String
  usuario            String
  senha              String
  metodoAutenticacao String
  timeoutConexao     Int
  usarSSL            Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([servidorSMTP, porta, emailEnvio])
  @@map("config_emails")
}

model ConfigWhatsApp {
  id                      Int      @id @default(autoincrement())
  phoneNumberId           String   @map("phone_number_id")
  accessToken             String   @map("access_token")
  businessAccountId       String?  @map("business_account_id")
  verifyToken             String?  @map("verify_token")
  numeroTelefone          String   @map("numero_telefone")
  nomeExibicao            String   @map("nome_exibicao")
  ativo                   Boolean  @default(true)
  webhookUrl              String?  @map("webhook_url")
  configuracoesAdicionais Json?    @map("configuracoes_adicionais")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([phoneNumberId, numeroTelefone])
  @@map("config_whatsapp")
}

model Notificacao {
  id              Int                   @id @default(autoincrement())
  titulo          String                @db.VarChar(100)
  conteudo        String
  tipo            TipoNotificacao       @default(SISTEMA)
  status          StatusNotificacao     @default(NAO_LIDA)
  prioridade      PrioridadeNotificacao @default(MEDIA)
  usuarioId       Int?                  @map("usuario_id")
  dadosAdicionais Json?                 @map("dados_adicionais")
  link            String?               @db.VarChar(255)
  expirarEm       DateTime?             @map("expirar_em")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  usuario         Usuario?              @relation(fields: [usuarioId], references: [id])

  @@map("notificacoes")
}

model Cultura {
  id                Int                  @id @default(autoincrement())
  descricao         String               @unique
  periodicidade     PeriodicidadeCultura
  permitirConsorcio Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  areasFornecedores AreaFornecedor[]
  frutas            Fruta[]
  lotesCulturas     LotesCulturas[]
  usuarios          Usuario[]

  @@map("culturas")
}

model AreaAgricola {
  id                 Int                  @id @default(autoincrement())
  nome               String               @db.VarChar(100)
  categoria          CategoriaArea        @default(COLONO)
  areaTotal          Float                @map("area_total")
  coordenadas        Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  desativar          Boolean              @default(false)
  controlesBanana    ControleBanana[]
  frutasPedidosAreas FrutasPedidosAreas[]
  lotes              LotesCulturas[]

  @@map("areas_agricolas")
}

model LotesCulturas {
  id             Int          @id @default(autoincrement())
  areaAgricolaId Int          @map("area_agricola_id")
  culturaId      Int          @map("cultura_id")
  areaPlantada   Float        @map("area_plantada")
  areaProduzindo Float        @default(0) @map("area_produzindo")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  areaAgricola   AreaAgricola @relation(fields: [areaAgricolaId], references: [id], onDelete: Cascade)
  cultura        Cultura      @relation(fields: [culturaId], references: [id], onDelete: Cascade)

  @@unique([areaAgricolaId, culturaId])
  @@map("lotes_culturas")
}

model Fruta {
  id              Int                        @id @default(autoincrement())
  nome            String                     @db.VarChar(100)
  codigo          String?                    @unique
  descricao       String?
  status          StatusFruta?               @default(ATIVA)
  nomeCientifico  String?                    @map("nome_cientifico")
  corPredominante String?                    @map("cor_predominante")
  epocaColheita   String?                    @map("epoca_colheita")
  observacoes     String?
  createdAt       DateTime                   @default(now()) @map("created_at")
  updatedAt       DateTime                   @updatedAt @map("updated_at")
  culturaId       Int                        @map("cultura_id")
  cultura         Cultura                    @relation(fields: [culturaId], references: [id])
  frutasPedidos   FrutasPedidos[]
  custosColheita  TurmaColheitaPedidoCusto[]

  @@map("frutas")
}

model Cliente {
  id                 Int           @id @default(autoincrement())
  nome               String        @db.VarChar(100)
  razaoSocial        String?       @db.VarChar(100)
  cnpj               String?       @db.VarChar(18)
  cpf                String?       @db.VarChar(14)
  inscricaoEstadual  String?       @db.VarChar(20)
  inscricaoMunicipal String?       @db.VarChar(20)
  cep                String?       @db.VarChar(9)
  logradouro         String?       @db.VarChar(100)
  numero             String?       @db.VarChar(10)
  complemento        String?       @db.VarChar(50)
  bairro             String?       @db.VarChar(50)
  cidade             String?       @db.VarChar(50)
  estado             String?       @db.VarChar(2)
  telefone1          String?       @db.VarChar(15)
  telefone2          String?       @db.VarChar(15)
  email1             String?       @db.VarChar(100)
  email2             String?       @db.VarChar(100)
  observacoes        String?
  status             StatusCliente @default(ATIVO)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  industria          Boolean?      @default(false)
  pedidos            Pedido[]

  @@map("clientes")
}

model Fornecedor {
  id          Int              @id @default(autoincrement())
  nome        String           @db.VarChar(100)
  cnpj        String?          @unique
  cpf         String?          @unique
  telefone    String?
  email       String?
  endereco    String?
  observacoes String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  areas       AreaFornecedor[]

  @@map("fornecedores")
}

model AreaFornecedor {
  id                 Int                  @id @default(autoincrement())
  fornecedorId       Int
  nome               String               @db.VarChar(100)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  culturaId          Int?                 @map("cultura_id")
  cultura            Cultura?             @relation(fields: [culturaId], references: [id])
  fornecedor         Fornecedor           @relation(fields: [fornecedorId], references: [id], onDelete: Cascade)
  frutasPedidosAreas FrutasPedidosAreas[]

  @@map("areas_fornecedores")
}

model Pedido {
  id                   Int                        @id @default(autoincrement())
  numeroPedido         String                     @unique
  clienteId            Int
  dataPedido           DateTime                   @default(now())
  dataPrevistaColheita DateTime
  dataColheita         DateTime?
  frete                Float?
  icms                 Float?
  desconto             Float?
  valorFinal           Float?
  status               StatusPedido               @default(PEDIDO_CRIADO)
  observacoes          String?
  observacoesColheita  String?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  valorRecebido        Float?
  avaria               Float?
  nomeMotorista        String?
  pesagem              String?
  placaPrimaria        String?
  placaSecundaria      String?
  indDataDescarga      DateTime?                  @map("ind_data_descarga")
  indDataEntrada       DateTime?                  @map("ind_data_entrada")
  indMediaMililitro    Float?                     @map("ind_media_mililitro")
  indNumeroNf          Int?                       @map("ind_numero_nf")
  indPesoMedio         Float?                     @map("ind_peso_medio")
  frutasPedidos        FrutasPedidos[]
  pagamentosPedidos    PagamentosPedidos[]
  cliente              Cliente                    @relation(fields: [clienteId], references: [id])
  custosColheita       TurmaColheitaPedidoCusto[]

  @@map("pedidos")
}

model FrutasPedidos {
  id                    Int                  @id @default(autoincrement())
  pedidoId              Int
  frutaId               Int
  quantidadePrevista    Float
  quantidadeReal        Float?
  quantidadeReal2       Float?
  unidadeMedida1        UnidadeMedida
  unidadeMedida2        UnidadeMedida?
  valorUnitario         Float?
  valorTotal            Float?
  unidadePrecificada    UnidadeMedida?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  quantidadePrecificada Float?
  fruta                 Fruta                @relation(fields: [frutaId], references: [id])
  pedido                Pedido               @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  areas                 FrutasPedidosAreas[]
  fitas                 FrutasPedidosFitas[]

  @@unique([pedidoId, frutaId])
  @@map("frutas_pedidos")
}

model PagamentosPedidos {
  id                   Int             @id @default(autoincrement())
  pedidoId             Int
  dataPagamento        DateTime
  valorRecebido        Float
  metodoPagamento      MetodoPagamento
  observacoesPagamento String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  contaDestino         ContaDestino
  chequeCompensado     Boolean?        @default(false)
  referenciaExterna    String?         @db.VarChar(100)
  pedido               Pedido          @relation(fields: [pedidoId], references: [id], onDelete: Cascade)

  @@map("pagamentos_pedidos")
}

model FrutasPedidosAreas {
  id                        Int             @id @default(autoincrement())
  frutaPedidoId             Int
  areaPropriaId             Int?
  areaFornecedorId          Int?
  observacoes               String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  quantidadeColhidaUnidade1 Int?
  quantidadeColhidaUnidade2 Int?
  areaFornecedor            AreaFornecedor? @relation(fields: [areaFornecedorId], references: [id], onDelete: SetNull)
  areaPropria               AreaAgricola?   @relation(fields: [areaPropriaId], references: [id])
  frutaPedido               FrutasPedidos   @relation(fields: [frutaPedidoId], references: [id], onDelete: Cascade)

  @@map("frutas_pedidos_areas")
}

model FrutasPedidosFitas {
  id               Int            @id @default(autoincrement())
  frutaPedidoId    Int
  fitaBananaId     Int
  quantidadeFita   Float?
  observacoes      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  controleBananaId Int
  controleBanana   ControleBanana @relation(fields: [controleBananaId], references: [id])
  fitaBanana       FitaBanana     @relation(fields: [fitaBananaId], references: [id])
  frutaPedido      FrutasPedidos  @relation(fields: [frutaPedidoId], references: [id], onDelete: Cascade)

  @@unique([frutaPedidoId, controleBananaId])
  @@map("frutas_pedidos_fitas")
}

model FitaBanana {
  id            Int                  @id @default(autoincrement())
  nome          String               @unique @db.VarChar(100)
  corHex        String               @db.VarChar(7)
  dataCriacao   DateTime             @default(now())
  usuarioId     Int
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  controles     ControleBanana[]
  usuario       Usuario              @relation(fields: [usuarioId], references: [id])
  frutasPedidos FrutasPedidosFitas[]

  @@map("fitas_banana")
}

model ControleBanana {
  id                     Int                  @id @default(autoincrement())
  fitaBananaId           Int
  areaAgricolaId         Int
  quantidadeFitas        Int
  dataRegistro           DateTime             @default(now())
  usuarioId              Int
  observacoes            String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  quantidadeInicialFitas Int
  areaAgricola           AreaAgricola         @relation(fields: [areaAgricolaId], references: [id])
  fitaBanana             FitaBanana           @relation(fields: [fitaBananaId], references: [id])
  usuario                Usuario              @relation(fields: [usuarioId], references: [id])
  frutasPedidosFitas     FrutasPedidosFitas[]
  historicos             HistoricoFitas[]

  @@map("controle_banana")
}

model HistoricoFitas {
  id               Int            @id @default(autoincrement())
  controleBananaId Int
  usuarioId        Int
  acao             String         @db.VarChar(50)
  dadosAnteriores  Json?
  dadosNovos       Json?
  createdAt        DateTime       @default(now())
  controleBanana   ControleBanana @relation(fields: [controleBananaId], references: [id], onDelete: Cascade)
  usuario          Usuario        @relation(fields: [usuarioId], references: [id])

  @@map("historico_fitas")
}

model TurmaColheita {
  id                   Int                        @id @default(autoincrement())
  nomeColhedor         String                     @db.VarChar(100)
  chavePix             String?                    @db.VarChar(100)
  responsavelChavePix  String?                   @db.VarChar(100)
  observacoes          String?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  dataCadastro         DateTime                   @default(now())
  custosColheita       TurmaColheitaPedidoCusto[]

  @@map("turma_colheita")
}

model TurmaColheitaPedidoCusto {
  id                Int           @id @default(autoincrement())
  turmaColheitaId   Int
  pedidoId          Int
  frutaId           Int
  quantidadeColhida Float
  unidadeMedida     UnidadeMedida
  valorColheita     Float?
  dataColheita      DateTime?
  pagamentoEfetuado Boolean       @default(false)
  observacoes       String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  dataPagamento     DateTime?
  fruta             Fruta         @relation(fields: [frutaId], references: [id])
  pedido            Pedido        @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  turmaColheita     TurmaColheita @relation(fields: [turmaColheitaId], references: [id], onDelete: Cascade)

  @@unique([turmaColheitaId, pedidoId, frutaId])
  @@map("turma_colheita_pedido_custo")
}

enum NivelUsuario {
  ADMINISTRADOR
  USUARIO
  CONVIDADO
  GERENTE_GERAL
  ESCRITORIO
  GERENTE_CULTURA
}

enum TipoNotificacao {
  SISTEMA
  PIX
  COBRANCA
  FATURA
  BOLETO
  ALERTA
}

enum StatusNotificacao {
  NAO_LIDA
  LIDA
  DESCARTADA
}

enum PrioridadeNotificacao {
  BAIXA
  MEDIA
  ALTA
}

enum CategoriaArea {
  COLONO
  TECNICO
  EMPRESARIAL
  ADJACENTE
}

enum PeriodicidadeCultura {
  PERENE
  TEMPORARIA
}

enum StatusFruta {
  ATIVA
  INATIVA
}

enum StatusCliente {
  ATIVO
  INATIVO
}

enum ContaDestino {
  ALENCAR
  FRANCIALDA
  GAVETA
}

enum StatusPedido {
  PEDIDO_CRIADO
  AGUARDANDO_COLHEITA
  COLHEITA_REALIZADA
  AGUARDANDO_PRECIFICACAO
  PRECIFICACAO_REALIZADA
  AGUARDANDO_PAGAMENTO
  PAGAMENTO_REALIZADO
  PEDIDO_FINALIZADO
  CANCELADO
  PAGAMENTO_PARCIAL
}

enum UnidadeMedida {
  KG
  CX
  TON
  UND
  ML
  LT
}

enum MetodoPagamento {
  PIX
  BOLETO
  TRANSFERENCIA
  DINHEIRO
  CHEQUE
}
